//fake requests
const { mockRequest, mockResponse } = require('../util/interceptor')


//async functions to test:
const axios = require('axios');
const { getIndex, getInfo } = require('../controllers/main')
const Whale = require('../models/whale')

describe("Home and info pages are responding properly ", () => {
    test('homepage ok', async () => {

        let req = mockRequest();
        const res = mockResponse();

        await getIndex(req, res);

        expect(res.render).toHaveBeenCalledTimes(1)
        expect(res.render).toHaveBeenCalledWith("main/index", {"coordinates": "[]", "path": "/", "quantity": null, "whale": null});
    });

    test('info page ok', async () => {

        let req = mockRequest();
        const res = mockResponse();

        await getInfo(req, res);

        expect(res.render).toHaveBeenCalledTimes(1)
        expect(res.render).toHaveBeenCalledWith("main/info", { "path": "/info" });
    });

    
});


//API tests

describe(" Whale model generates link that can be used in API", () => {

    beforeEach(() => {
        jest.setTimeout(10000);
    });

    let link = '';
    let axiosResponse = null;
    let axiosError = null;

    test("LINK was generated by Whale.getCoordintes()", async () => {

        await Whale.getCoordintes('orca', '2012-03', '2020-03')

        link = Whale.getApiLink();

        expect(link).toBe('http://hotline.whalemuseum.org/api.json?species=orca&since=2012-03-01&until=2020-03-01&limit=50')

    });

    test('whale hotline responed to LINK with an object (axios parsed)', (done) => {

        axios.get(link)
            .then(res => {
                
                expect(typeof res ==="object").toBe(true);
                done()
            })
            .catch(err => {
                axiosError = err
                expect(err).toBe(null)
                done()
            })
    });

});



